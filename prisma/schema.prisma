generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

enum AdoptionStatus {
  AVAILABLE
  ADOPTED
}

model User {
  userId            String    @id @default(uuid())
  firstName         String
  lastName          String
  email             String    @unique
  password          String
  phoneNumber       String?
  address           String?
  dateOfBirth       DateTime?
  createdAt         DateTime  @default(now())
  verificationToken String    @default("")
  verified          Boolean   @default(false)
  image             String?

  adoptions       Adoption[]
  strayDogReports StrayDogReport[]

  AdoptionApplication AdoptionApplication[]

  Story Story[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Pet {
  petId          String         @id @default(uuid())
  name           String
  species        String
  breed          String
  age            Int
  gender         Gender
  size           PetSize
  color          String
  healthStatus   String
  adoptionStatus AdoptionStatus
  addedAt        DateTime       @default(now())
  images         String[]

  adoptions         Adoption[]
  answerPetMappings AnswerPetMapping[]

  AdoptionApplication AdoptionApplication[]
}

model QuizQuestion {
  questionId   String   @id @default(uuid())
  questionText String
  createdAt    DateTime @default(now())

  answers QuizAnswer[]
}

model QuizAnswer {
  answerId   String   @id @default(uuid())
  questionId String
  answerText String
  createdAt  DateTime @default(now())

  question          QuizQuestion       @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  answerPetMappings AnswerPetMapping[]
}

model Adoption {
  adoptionId     String   @id @default(uuid())
  userId         String
  petId          String
  adoptionDate   DateTime @default(now())
  adoptionStatus String

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [petId], onDelete: Cascade)
}

model StrayDogReport {
  reportId    String   @id @default(uuid())
  userId      String
  location    String
  description String
  reportDate  DateTime @default(now())
  status      String
  image       String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Admin {
  adminId   String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  sentMessages     Message[] @relation("AdminSentMessages")
  receivedMessages Message[] @relation("AdminReceivedMessages")
}

model AnswerPetMapping {
  id       String   @id @default(uuid())
  answerId String
  petId    String
  addedAt  DateTime @default(now())

  answer QuizAnswer @relation(fields: [answerId], references: [answerId], onDelete: Cascade)
  pet    Pet        @relation(fields: [petId], references: [petId], onDelete: Cascade)

  @@unique([answerId, petId]) // Prevent duplicate mappings
}

model AdoptionApplication {
  applicationId    String   @id @default(uuid())
  userId           String
  petId            String
  reason           String
  hasPetExperience String
  homeType         String
  hasOtherPets     String
  status           String   @default("PENDING")
  submittedAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [petId], onDelete: Cascade)
}

model Story {
  id               String   @id @default(uuid())
  title            String
  thumbnail        String
  shortDescription String
  content          String
  category         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  status           String

  userId String
  user   User   @relation(fields: [userId], references: [userId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // USER sender and receiver
  senderUserId String?
  senderUser   User?   @relation("SentMessages", fields: [senderUserId], references: [userId])

  receiverUserId String?
  receiverUser   User?   @relation("ReceivedMessages", fields: [receiverUserId], references: [userId])

  // ADMIN sender and receiver
  senderAdminId String?
  senderAdmin   Admin?  @relation("AdminSentMessages", fields: [senderAdminId], references: [adminId])

  receiverAdminId String?
  receiverAdmin   Admin?  @relation("AdminReceivedMessages", fields: [receiverAdminId], references: [adminId])
}
